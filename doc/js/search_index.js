var search_data = {"index":{"searchIndex":["cell","maze","mazebuilder","add_information()","add_neighbors()","add_walls()","coordinates()","display()","load()","load_str()","new()","new()","new()","redesign()","redesign()","reset()","solve()","trace()","travelable_neighbors()","readme"],"longSearchIndex":["cell","maze","mazebuilder","cell#add_information()","cell#add_neighbors()","cell#add_walls()","cell#coordinates()","maze#display()","maze#load()","mazebuilder#load_str()","cell::new()","maze::new()","mazebuilder::new()","maze#redesign()","mazebuilder#redesign()","cell#reset()","maze#solve()","maze#trace()","cell#travelable_neighbors()",""],"info":[["Cell","","Cell.html","","<p>Represents a cell within a maze\n"],["Maze","","Maze.html","","<p>Maze class - used for creating, solving, and printing mazes uses\nMazeBuilder to create the layout of …\n"],["MazeBuilder","","MazeBuilder.html","","<p>Used to handle the generation and redesigning of new mazes\n"],["add_information","Cell","Cell.html#method-i-add_information","(cell_matrix, wall_matrix)","<p>Add information about this cell’s walls and neighboring cells\n"],["add_neighbors","Cell","Cell.html#method-i-add_neighbors","(cell_matrix)","<p>Update the neighbors hash based on the cell Matrix given\n"],["add_walls","Cell","Cell.html#method-i-add_walls","(wall_matrix)","<p>Update the walls hash based on the array of walls given 0 represents no\nwall, 1 represents a wall\n"],["coordinates","Cell","Cell.html#method-i-coordinates","()","<p>Returns a hash of the coordinates of this cell\n"],["display","Maze","Maze.html#method-i-display","()","<p>Outputs an ASCII representation of the maze\n"],["load","Maze","Maze.html#method-i-load","(str)","<p>Converts a string of 0’s and 1’s into a maze 0 represents an open space 1\nrepresents a wall in the maze …\n"],["load_str","MazeBuilder","MazeBuilder.html#method-i-load_str","(str)","<p>Convert a string of 0’s and 1’s into a 2D array The array represents the\nwalls and empty spaces of the …\n"],["new","Cell","Cell.html#method-c-new","(r, c)","<p>Creates a new cell at position (r,c) in the maze\n"],["new","Maze","Maze.html#method-c-new","(r, c)","<p>Creates a new maze r represents the number of rows in the maze c represents\nthe number of columns in …\n"],["new","MazeBuilder","MazeBuilder.html#method-c-new","(r, c)","<p>Creates a new MazeBuilder The Maze class depends on these attributes\n"],["redesign","Maze","Maze.html#method-i-redesign","(rows = @num_rows, cols = @num_cols)","<p>Creates a new maze If no parameters are given, the new maze will be the\nsame size as the current maze …\n"],["redesign","MazeBuilder","MazeBuilder.html#method-i-redesign","(rows, cols)","<p>Create a new maze with dimensions of rows x cols Based off of the\ndepth-first algorithm at www.mazeworks.com/mazegen/mazetut …\n"],["reset","Cell","Cell.html#method-i-reset","()","<p>Resets the cell to how it was before anything was changed by\nMaze#find_maze_path or Maze#redesign\n"],["solve","Maze","Maze.html#method-i-solve","(begR, begC, endR, endC)","<p>Determines if the current maze can be solved Uses Maze#trace to check if a\nsolution exists\n"],["trace","Maze","Maze.html#method-i-trace","(begR, begC, endR, endC)","<p>Finds the shortest solution to the current maze if it exists Calls\nfind_maze_path, which uses a breadth-first …\n"],["travelable_neighbors","Cell","Cell.html#method-i-travelable_neighbors","()","<p>Returns an array of all Cells that can be reached from the current cell\n"],["README","","README_md.html","","<p>pa3\n<p>Ruby Coding Assignment 3\n"]]}}